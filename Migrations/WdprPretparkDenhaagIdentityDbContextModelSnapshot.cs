// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WdprPretparkDenhaag.Areas.Identity.Data;

namespace WdprPretparkDenhaag.Migrations
{
    [DbContext(typeof(WdprPretparkDenhaagIdentityDbContext))]
    partial class WdprPretparkDenhaagIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Achternaam")
                        .HasColumnType("TEXT");

                    b.Property<string>("BezoekerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Leeftijd")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Voornaam")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BezoekerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Attractie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AantalLikes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AngstFactor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Foto")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Inschrijfplicht")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimaleLeeftijd")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimaleLengte")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Naam")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OpeningsTijd")
                        .HasColumnType("TEXT");

                    b.Property<double>("Prijs")
                        .HasColumnType("REAL");

                    b.Property<int>("Reservaties")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reserveercapaciteit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SluitingsTijd")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Attracties");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Bezoeker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Achternaam")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("Leeftijd")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Voornaam")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Bezoekers");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Planning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BezoekersId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Dag")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotaleKosten")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Planningen");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.PlanningItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AttractieId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Dag")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlanningId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Prijs")
                        .HasColumnType("REAL");

                    b.Property<Guid>("TijdSlotId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttractieId");

                    b.HasIndex("TijdSlotId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanningItems");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Tijdslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BeginTijd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EindTijd")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Tijdsloten");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.ApplicationUser", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", "Bezoeker")
                        .WithMany()
                        .HasForeignKey("BezoekerId");

                    b.Navigation("Bezoeker");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Attractie", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", null)
                        .WithMany("Attracties")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Bezoeker", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", null)
                        .WithMany("Bezoekers")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Planning", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", null)
                        .WithMany("Planningen")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.PlanningItem", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.Attractie", "Attractie")
                        .WithMany("planningItemsAttracties")
                        .HasForeignKey("AttractieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WdprPretparkDenhaag.Models.Tijdslot", "Tijdslot")
                        .WithMany("PlanningItem")
                        .HasForeignKey("TijdSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", "User")
                        .WithMany("PlanningItems")
                        .HasForeignKey("UserId");

                    b.Navigation("Attractie");

                    b.Navigation("Tijdslot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Tijdslot", b =>
                {
                    b.HasOne("WdprPretparkDenhaag.Models.ApplicationUser", null)
                        .WithMany("Tijdsloten")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.ApplicationUser", b =>
                {
                    b.Navigation("Attracties");

                    b.Navigation("Bezoekers");

                    b.Navigation("Planningen");

                    b.Navigation("PlanningItems");

                    b.Navigation("Tijdsloten");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Attractie", b =>
                {
                    b.Navigation("planningItemsAttracties");
                });

            modelBuilder.Entity("WdprPretparkDenhaag.Models.Tijdslot", b =>
                {
                    b.Navigation("PlanningItem");
                });
#pragma warning restore 612, 618
        }
    }
}
